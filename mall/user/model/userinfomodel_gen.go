// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userinfoFieldNames          = builder.RawFieldNames(&Userinfo{})
	userinfoRows                = strings.Join(userinfoFieldNames, ",")
	userinfoRowsExpectAutoSet   = strings.Join(stringx.Remove(userinfoFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userinfoRowsWithPlaceHolder = strings.Join(stringx.Remove(userinfoFieldNames, "`userid`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheUserinfoUseridPrefix = "cache:userinfo:userid:"
)

type (
	userinfoModel interface {
		Insert(ctx context.Context, data *Userinfo) (sql.Result, error)
		FindOne(ctx context.Context, userid string) (*Userinfo, error)
		Update(ctx context.Context, data *Userinfo) error
		Delete(ctx context.Context, userid string) error
	}

	defaultUserinfoModel struct {
		sqlc.CachedConn
		table string
	}

	Userinfo struct {
		Userid   string `db:"userid"`
		Password string `db:"password"`
		Del      int64  `db:"del"`
	}
)

func newUserinfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserinfoModel {
	return &defaultUserinfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`userinfo`",
	}
}

func (m *defaultUserinfoModel) Delete(ctx context.Context, userid string) error {
	userinfoUseridKey := fmt.Sprintf("%s%v", cacheUserinfoUseridPrefix, userid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `userid` = ?", m.table)
		return conn.ExecCtx(ctx, query, userid)
	}, userinfoUseridKey)
	return err
}

func (m *defaultUserinfoModel) FindOne(ctx context.Context, userid string) (*Userinfo, error) {
	userinfoUseridKey := fmt.Sprintf("%s%v", cacheUserinfoUseridPrefix, userid)
	var resp Userinfo
	err := m.QueryRowCtx(ctx, &resp, userinfoUseridKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `userid` = ? limit 1", userinfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserinfoModel) Insert(ctx context.Context, data *Userinfo) (sql.Result, error) {
	userinfoUseridKey := fmt.Sprintf("%s%v", cacheUserinfoUseridPrefix, data.Userid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userinfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Userid, data.Password, data.Del)
	}, userinfoUseridKey)
	return ret, err
}

func (m *defaultUserinfoModel) Update(ctx context.Context, data *Userinfo) error {
	userinfoUseridKey := fmt.Sprintf("%s%v", cacheUserinfoUseridPrefix, data.Userid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `userid` = ?", m.table, userinfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Password, data.Del, data.Userid)
	}, userinfoUseridKey)
	return err
}

func (m *defaultUserinfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserinfoUseridPrefix, primary)
}

func (m *defaultUserinfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `userid` = ? limit 1", userinfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserinfoModel) tableName() string {
	return m.table
}
